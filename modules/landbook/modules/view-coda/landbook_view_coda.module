<?php
/**
 * @file
 * Code for the Landbook View Coda feature.
 */

/**
 * This module provides the Land Book visualization
 * It interface with js-view-coda library
 *
 * Author: Jules Clement <jules@landportal.info>
 */

global $_LBVC;
$_LBVC = array();

// LP taxonomies VID: 25 = indicators ; 24 = datasets
define("LBVC_IND_VID", 25);
define("LBVC_CAT_VID", 24);

include_once 'landbook_view_coda.ui.inc';
include_once 'landbook_view_coda.library.inc';
include_once 'landbook_view_coda.forms.inc';
include_once 'landbook_view_coda.fields.inc';
include_once 'landbook_view_coda.blocks.inc';
include_once 'landbook_view_coda.features.inc';

/**
 * Implements hook_theme().
 */
function landbook_view_coda_theme($existing, $type, $theme, $path) {
  // Scan this directory for template files
  $templates = drupal_find_theme_templates($existing, '.tpl.php', $path);
  return $templates;
}

// Add view-coda  CSS classes to the Visusalization blocks
function landbook_view_coda_preprocess_entity(&$variables, $hook) {
  if ($variables['elements']['#bundle'] == 'field_visualization') {
    $variables['classes_array'][] = 'view-coda';
    if (isset($variables['field_view_coda'][0])) {
      $variables['classes_array'][] = 'view-coda-' . $variables['field_view_coda'][0]['type'];
      $variables['attributes_array']['id'] = 'vc' . $variables['id'];
    }
  }
}

function landbook_view_coda_vis_form($form, &$form_state, $extra) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Doit!',
  );
  //$form += $extra;
  return $extra;//$form;
}

function landbook_view_coda_menu() {
  // Create an array of block settings.
  $settings = array(
    'title' => 'Add Visualization block',
    'description' => 'Add a new Visualization block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('landbook_view_coda_add_block_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'landbook_view_coda.admin.inc',
  );

  // Add a local action to the block configuration page.
  $items['admin/structure/block/add-visualization'] = array(
    'access arguments' => array('administer blocks'),
  ) + $settings;

  $items['admin/structure/block/administer/visualization/%/delete'] = array(
    'title' => 'Delete Visualization block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('landbook_view_coda_block_delete', 5),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'landbook_view_coda.admin.inc',
  );

  return $items;
}



/**
 * Helper functions
 */

// ind = indicator taxonomy term id
function lbvc__indicators_cache(&$params, $tid) {
  $term = taxonomy_term_load($tid);
  $lb = lbvc__indicators_js_serialize($term);

  // Should be stored / applied by indicators , not globally
  if ($term->field_observations) {
    if (!isset($params->observations)) $params->observations = [];
    $lb['obs'] = [];
    foreach($term->field_observations[LANGUAGE_NONE] as $n => $o) {
      $obs = taxonomy_term_load($o['tid']);
      $params->observations[$o['tid']] = array('id' => $o['tid'], 'label' => $obs->name, 'description' => $obs->description);
      array_push($lb['obs'], $o['tid']);
    }
    /* dpm($params->observations, 'obs'); */
    /* dpm($term->field_observations[LANGUAGE_NONE], 'obs'); */
  }
  $params->cache[$lb['id']] = $lb;
  return $lb['id'];
}


function lbvc__indicators_process(&$params, $indicators) {
  foreach ($indicators as $ind) {
    //dpm($ind, $ind->name);
    $lbid = lbvc__indicators_cache($params, $ind->tid);
    array_push($params->indicators, $lbid);
  }
}

// Process an array of indicators (terms), fold them by hierarchy
function lbvc__indicators_tree(&$params, $indicators) {
  $params->ttop = [];
  $params->tree = [];
  foreach ($indicators as $ind) {
    $lbid = lbvc__indicators_cache($params, $ind->tid);
    $htree = hierarchical_taxonomy_get_tree(LBVC_IND_VID, $ind->tid, 2); // max depth: 2
    $params->tree[$lbid] = array();
    $params->ttop[] = $lbid;
    lbvc__indicators_flatten($params, $params->tree[$lbid], $htree);
  }
  //dpm($params);
}

// Crawl hierarchical_taxonomy_get_tree results, 'flatten' that
function lbvc__indicators_flatten(&$params, &$tree, $parent) {
  // Re-sort terms by weight
  $stree = array();
  foreach ($parent as $k => $tind) { $stree[$k] = $tind->weight; }
  array_multisort($stree, $parent);
  //dpm($parent, 'o');
  foreach($parent as $tid => $term) {
    $lbid = lbvc__indicators_cache($params, $term->tid);
    //$params->cache[$lbid] = $lbt;
    if (isset($term->below)) {
      array_push($params->ttop, $lbid);
      // if 'obs'
      $tree[$lbid] = array();
      lbvc__indicators_flatten($params, $tree[$lbid], $term->below);
    }
    else {
      array_push($tree, $lbid);
    }
    array_push($params->indicators, $lbid);
  }
}


// Streamline indicator structure between Drupal/JS/LOD
function lbvc__indicators_js_serialize($entity) {
  $p = drupal_get_path_alias('taxonomy/term/' . $entity->tid);
  $ind = array(
    //'tid' => $entity->tid,
    'id' => $entity->field_id[LANGUAGE_NONE][0]['value'],
    'label' => $entity->name,
    'description' => $entity->description,
    'dataset' => null,
    'indicatorSeeAlso' => $p
  );
  //dpm($entity, 'Serial ' . $ind['id']);
  //$render = taxonomy_term_view($entity, 'teaser');
  $ind['render'] = '<span><a href="/'. $p .'">' . $entity->name . '</a>';
  if (strlen($entity->description) > 0) {
    $ind['render'] .= ' <span class="glyphicon glyphicon-info-sign" data-toggle="tooltip" data-placement="top" title="'
      . str_replace('"', "'", strip_tags($entity->description)) .'"></span>';
  }
  $ind['render'] .= '</span>';
  if (count($entity->field_unit) > 0) {
    $u = array_pop($entity->field_unit); // workaround language issues
    $ind['unit'] = $u[0]['value'];
  }
  if (@count($entity->field_orgref) > 0) {
    $u = array_pop($entity->field_orgref); // workaround language issues
    $ind['dataset'] = $u[0]['value'];
  }
  return $ind;
}

function lbvc__indicators_obs() {
  return array(
    'cex' => ['value', 'country', 'year'],
    'geo' => ['country'],
    'time' => ['year', 'period'],
    'meta' => [
      'unit', 'highlow', 'codedvalue',
      // computed/infered metadata - based on LOD datapoints?
      'minvalue', 'maxvalue', 'nbobs', 'nbcountries',
      'minyear', 'maxyear', 'nbyears',
    ],
  );
}

function lbvc__plugins_types() {
  return variable_get('lbvc.plugins', array());
}

// For LB Datasets / Indicators (taxonomies)
// Add JS variable to identify them by Land Book ID
function landbook_taxonomies_taxonomy_term_view($term, $view_mode, $langcode) {
  if (!in_array($term->vocabulary_machine_name, array('indicators', 'datasets')))
    return;
  drupal_add_js(array(
    'landbook' => array(
      'type' => substr($term->vocabulary_machine_name, 0, -1),
      'lbid'   => $term->field_id[LANGUAGE_NONE][0]['value'],
    )
  ), 'setting');
}
