<?php
/**
 * @file
 * Code for the Landbook View Coda feature.
 */

/**
 * This module provides the Land Book visualization
 * It interface with js-view-coda library
 *
 * Author: Jules Clement <jules@landportal.info>
 */

global $_LBVC;
$_LBVC = array();

// LP taxonomies VID: 25 = indicators ; 24 = datasets
define("LBVC_IND_VID", 25);
define("LBVC_CAT_VID", 24);

include_once 'landbook_view_coda.library.inc';
include_once 'landbook_view_coda.forms.inc';
include_once 'landbook_view_coda.fields.inc';
include_once 'landbook_view_coda.blocks.inc';
include_once 'landbook_view_coda.features.inc';


// Add view-coda  CSS classes to the Visusalization blocks
function landbook_view_coda_preprocess_entity(&$variables, $hook) {
  if ($variables['elements']['#bundle'] == 'field_visualization') {
    $variables['classes_array'][] = 'view-coda';
    if (isset($variables['field_view_coda'][0])) {
      $variables['classes_array'][] = 'view-coda-' . $variables['field_view_coda'][0]['type'];
    }
  }
}

function landbook_view_coda_vis_form($form, &$form_state, $extra) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Doit!',
  );
  //$form += $extra;
  return $extra;//$form;
}

function landbook_view_coda_menu() {
  // Create an array of block settings.
  $settings = array(
    'title' => 'Add Visualization block',
    'description' => 'Add a new Visualization block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('landbook_view_coda_add_block_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'landbook_view_coda.admin.inc',
  );

  // Add a local action to the block configuration page.
  $items['admin/structure/block/add-visualization'] = array(
    'access arguments' => array('administer blocks'),
  ) + $settings;

  $items['admin/structure/block/administer/visualization/%/delete'] = array(
    'title' => 'Delete Visualization block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('landbook_view_coda_block_delete', 5),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'landbook_view_coda.admin.inc',
  );

  return $items;
}



/**
 * Helper functions
 */

// ind = indicator taxonomy term id
function lbvc__indicators_cache($ind) {
  $pops = taxonomy_term_load($ind); // essentially to get the field_id
  $sicle = lbvc__indicators_js_serialize($pops);
  return $sicle;
}


function lbvc__indicators_process(&$stuff, $indicators) {
  foreach ($indicators as $ind) {
    $si = lbvc__indicators_js_serialize($ind);
    $stuff->cache[$si['id']] = $si;
    array_push($stuff->indicators, $si['id']);
  }
}

// Process an array of indicators (terms), fold them by hierarchy
function lbvc__indicators_tree(&$params, $indicators) {
  $hind = array();
  foreach ($indicators as $ind) {
    $tlbid = $ind->field_id[LANGUAGE_NONE][0]['value'];
    $htree = hierarchical_taxonomy_get_tree(LBVC_IND_VID, $ind->tid, 2); // max depth: 2
    $hind[$tlbid] = array();
    lbvc__indicators_flatten($params, $hind[$tlbid], $htree);
  }
  $params->tree = $hind;
}

// Crawl hierarchical_taxonomy_get_tree results, 'flatten' that
function lbvc__indicators_flatten(&$params, &$ff, $parent) {
  foreach($parent as $tid => $term) {
    $lbt = lbvc__indicators_cache($term->tid);
    // @TODO CACHE all that stuff
    if (isset($term->below)) {
      $ff[$lbt['id']] = array();
      lbvc__indicators_flatten($params, $ff[$lbt['id']], $term->below);
    } else {
      array_push($params->indicators, $lbt['id']);
      $params->cache[$lbt['id']] = $lbt;
      array_push($ff, $lbt['id']);
    }
  }
}


// Streamline indicator structure between Drupal/JS/LOD
function lbvc__indicators_js_serialize($entity) {
//  dpm($entity, 'SER');
  $render = taxonomy_term_view($entity, 'teaser');
  return array(
    //'tid' => $entity->tid,
    'id' => $entity->field_id[LANGUAGE_NONE][0]['value'],
    'label' => $entity->name,
    'desc' => $entity->description,
    'render' => drupal_render($render),
  );
}

function lbvc__indicators_obs() {
  return array(
    'cex' => ['value', 'country', 'year'],
    'geo' => ['country'],
    'time' => ['year', 'period'],
    'meta' => [
      'unit', 'highlow', 'codedvalue',
      // computed/infered metadata - based on LOD datapoints?
      'minvalue', 'maxvalue', 'nbobs', 'nbcountries',
      'minyear', 'maxyear', 'nbyears',
    ],
  );
}

function lbvc__plugins_types() {
  return variable_get('lbvc.plugins', array());
}



/******************************************
 *
 * Former hooks for the Land Book
 *
 * Add Drupal JS variables for
 * - Narrative pages (Thematics + Countries)
 * - LB datasets and indicators terms page
 */

// For LB Datasets / Indicators (taxonomies)
function landbook_view_coda_taxonomy_term_view($term, $view_mode, $langcode) {
  if (!in_array($term->vocabulary_machine_name, array('indicators', 'datasets')))
    return;
  drupal_add_js(array(
    'landbook' => array(
      'type' => $term->vocabulary_machine_name,
      'id'   => $term->field_id['und'][0]['value']
    )
  ), 'setting');
}

/**
 * Add visualisation settings variables to Drupal JS variables (Drupal.settings.landbook)
 *   for landbook pages / sections to display (old-style) block-visualizations.
 * Moslty iso3 for country-based pages (based on iso3 code in URLs, BAD!!! WTFme) and LB indicators ID for TP
 *
 * @TODO: should be based on the CT (or menu_get_item())
 */
function landbook_view_coda_page_build(&$page) {
  global $LBVIS_PATH;
  // Based on actuall path
  $url = explode('/', drupal_get_path_alias());
  //dpm($url, count($url));
  if ($url[0] != 'book') return;
  // JS var: Drupal.settings.landbook
  $view_coda = array('type' => 'book');

  if (count($url) < 2) return;
  //  + config screen to attach/show vis on a specific CT(?)
  if ($url[1] == 'thematic') {
    landbook_view_coda_js_settings_thematic($url, $view_coda);
  }
  if ($url[1] == 'countries' && count($url) > 2) {
    landbook_view_coda_js_settings_countries($url, $view_coda);
  }
  drupal_add_js(array('landbook' => $view_coda), 'setting');    
}

function landbook_view_coda_js_settings_thematic($url, &$vars) {
  // For thematic narrative nodes, pick indicators to show in the table (field_indicators)
  $item = menu_get_item();
  $node = array_pop($item['page_arguments']);
  // Indicators for visualization
  $table_ind = array();
  if (!empty($node->field_indicators[LANGUAGE_NONE])) {
    foreach($node->field_indicators['und'] as $ind) {
      $term = taxonomy_term_load($ind['tid']);
      $id = field_get_items('taxonomy_term', $term, 'field_id');
      array_push($table_ind, $id[0]['value']);
    }
  }
  $ranking_ind = null;
  if (!empty($node->field_indicator_ranking[LANGUAGE_NONE])) {
    $term = taxonomy_term_load($node->field_indicator_ranking[LANGUAGE_NONE][0]['tid']);
    $id = field_get_items('taxonomy_term', $term, 'field_id');
    $ranking_ind = $id[0]['value'];
  }
  $map_ind = null;
  if (!empty($node->field_indicator_map[LANGUAGE_NONE])) {
    $term = taxonomy_term_load($node->field_indicator_map[LANGUAGE_NONE][0]['tid']);
    $id = field_get_items('taxonomy_term', $term, 'field_id');
    $map_ind = $id[0]['value'];
  }
  // Fill up JS settings
  $vars = array(
    'type'        => 'thematic',
    'indicators'  => $table_ind,
    'ranking'     => $ranking_ind,
    'map'         => $map_ind,
  );
}

function landbook_view_coda_js_settings_countries($url, &$vars) {
  global $LBVIS_PATH;
  //drupal_add_css($LBVIS_PATH . '/css/screen.css', array('group' => CSS_DEFAULT));
  // Borken / @todo: put back a nice loading in js-view-coda // not here?
  /* drupal_add_css($LBVIS_PATH . '/css/spinkit.css', array('group' => CSS_DEFAULT)); */
  $vars = array(
    'type'        => 'country',
    'libraryPath' => $LBVIS_PATH,
    'countryCode' => $url[2]
  );
}

