<?php
/**
 * @file
 * This module provide an interface to the landbook section of the Landportal.
 *
 * The Landportal landbook
 *
 * Drupal refactoring: Jules <jules@ker.bz>
 */

include_once 'landbook.block.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function landbook_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "context" && $api == "context") {
    return array("version" => "3");
  }
}

/**
 * Implements hook_context_default_contexts().
 * Automatically load all contexts found in MODULE/contexts/*.inc
 */
function landbook_context_default_contexts() {
  $export = array();
  $path = drupal_get_path('module', 'landbook').'/contexts';
  $files = file_scan_directory($path, '/\.inc$/');
  foreach ($files as $filepath => $file) {
    $context = NULL;
    include_once $filepath;
    if ($context) {
      $export[$context->name] = $context;
    }
  }
  return $export;
}

/**
 * Land Book Views
 */
function landbook_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Implements hook_views_default_views().
 * Automatically load all views found in MODULE/views/*.inc
 */
function landbook_views_default_views() {
  $export = array();
  $path = drupal_get_path('module', 'landbook').'/views';
  $files = file_scan_directory($path, '/\.inc$/');
  foreach ($files as $filepath => $file) {
    include_once $filepath;
    $export[$view->name] = $view;
  }
  return $export;
}

/**
 * Implements hook_theme().
 */
function landbook_menu() {
  $items = array();
  // Create hook for Country narrative pages
  $items['book/countries/%'] = array(
    'title'           => 'Land Portal Country portfolio',
    'type'            => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback'   => 'landbook_country_page',
    'page arguments'  => array(2),
  );
  return $items;
}

// Render either a Country Narrative (node) or the Country term (taxonomy term)
function landbook_country_page($iso3) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
        ->entityCondition('bundle', 'regions')
        ->fieldCondition('field_iso3', 'value', $iso3, '=');
  $result = $query->execute();
  $tid = array_keys($result['taxonomy_term'])[0];

  // Search for Country narrative (landbook_country)
  $cp = new EntityFieldQuery();
  $cp->entityCondition('entity_type', 'node')
     ->entityCondition('bundle', 'landbook_country')
     ->fieldCondition('field_geographical_focus', 'tid', $tid, '=');
  $cpresult = $cp->execute();
  if ($cpresult) {
    $nid = array_keys($cpresult['node'])[0];
    $node = node_load($nid);
    return node_page_view($node);
  } else {
    $term = taxonomy_term_load($tid);
    return taxonomy_term_view($term, 'full');
  }
}

// Add the edit link to landbook_country pages
function landbook_preprocess(&$variables, $hook) {
  // Only for user that can administrer nodes
  if (user_access('administer nodes')) {
    if ($hook == 'page' && @($nodes = $variables['page']['content']['system_main']['nodes'])) {
      $nid = array_keys($nodes)[0];
      if ($nodes[$nid]['#bundle'] == 'landbook_country' && !$variables['tabs']['#primary']) {
        // dpm($variables['tabs']['#primary']);
        $variables['tabs']['#primary'][] = array(
          '#markup' => '<li>' . l('View', 'node/' . $nid ) . '</li>',
        );
        $variables['tabs']['#primary'][] = array(
          '#markup' => '<li>' . l('Edit', 'node/' . $nid . '/edit') . '</li>',
        );
      }
    }
  }
}
