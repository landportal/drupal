<?php
/**
 * @file
 * This module provide an interface to the landbook section of the Landportal.
 *
 * The Landportal landbook
 *
 * Drupal refactoring: Jules <jules@ker.bz>
 */


$BOOK_PATH = drupal_get_path('module', 'landbook');

require_once($BOOK_PATH . '/includes/landbook.menu.inc');
require_once($BOOK_PATH . '/includes/landbook.block.inc');
require_once($BOOK_PATH . '/includes/landbook.theme.inc');
//require_once($BOOK_PATH . '/includes/landbook.library.inc');
require_once($BOOK_PATH . '/includes/landbook.views_default.inc');

function landbook_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

function landbook_help($path, $arg) {
  switch ($path) {
  case "admin/help#landbook":
    return '<p>' . t("Landbook section of the Landportal") . '</p>'
      . '<p>' . t("It provides differents menus, block, pages and hooks plus a few configuration pages"). '</p>'
      . '<p>' . t("The Landbook is composed of different modules: catalog, countries, indicators, regions, reuse, sources, widgets") . '</p>'
      . '<p>' . t("Each submodule comes with some JS to allow dynamic actions and template(s) for main content and eventually sidebars elements.") . '</p>'
      . '<p>' . t("This module also provides ajax ready pages (which output some JSON, see: ajax/) for JS callbacks.") . '</p>'
      ;
    break;
  }
}

// Hook country narrative page
function landbook_page_build(&$page) {
  $args = arg();
    if ($args[0] == 'book' && $args[1] == 'countries') {
        landbook_country_narrative($args[2]);
    }
}

function landbook_country_narrative($iso3) {
    global $LBVIS_PATH;
    $LBVIS_PATH = base_path() . 'sites/all/libraries/lbvis';
    // TODO: should be added by hook_library while declaring view-coda (aka lbvis)
    // TODO: add css with #attached (see vis_map module)
    drupal_add_css($LBVIS_PATH . '/css/screen.css', array('group' => CSS_DEFAULT));
    drupal_add_css($LBVIS_PATH . '/css/spinkit.css', array('group' => CSS_DEFAULT));
    drupal_add_js(array(
        'landbook' => array(
            //'path'          => $theme_path,
            'libraryPath'   => $LBVIS_PATH,
            'countryCode'   => $iso3
        )
    ), 'setting');
}

/**
 * Note: Webcoding
 * Explain AND document all the following functions
 * most of it seems overkill, un-necessary
 */
function landbook_views_query_alter(&$view, &$query){
    if(!empty($view->name) && $view->name=='landbook_countries_related'){
        if(arg(0)=='book' && arg(1) == 'countries'){
            $tid=landbook_get_region_iso(arg(2));
            $query->where[0]['conditions'][0]['value']=$tid;
        }
    }
}

function landbook_get_region_iso($iso){
    $tid = db_select('field_data_field_iso3', 't')
      ->fields('t', array('entity_id'))
      ->condition('t.field_iso3_value', $iso)
      ->condition('t.bundle', 'regions')
      ->execute()
      ->fetchField();
    return $tid;
}

function landbook_fill_regions_terms(){
  //strange country name
  $hard_country_name = 'Viet Nam';
  $fixed_hard_country_name = 'Vietnam';
  $vid_country = 3;

  $country_terms = taxonomy_get_tree($vid_country);
  foreach ($country_terms as $key => $term) {
    if ($term->name == $hard_country_name) {
      $term->name = $fixed_hard_country_name;
    }
    $tids = db_select('taxonomy_term_data', 't')
      ->fields('t', array('tid'))
      ->condition('t.name', $term->name)
      ->condition('t.vid', '7')
      ->execute()
      ->fetchCol();

    if (!empty($tids)) {
      $old_term = taxonomy_term_load($term->tid);
      foreach ($tids as $tid_key => $tid_value) {
        $reg_term = taxonomy_term_load($tid_value);
        $reg_term->field_iso3[LANGUAGE_NONE][0] = array(
          'value' => $old_term->field_iso3[LANGUAGE_NONE][0]['value']
        );
        try {
          taxonomy_term_save($reg_term);
        } catch(Exception $e) {
          error_log('LB fill regions terms');
        }
      }
    }
  }
}

function landbook_get_country_narrative_nid($title){
  $nid = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->condition('n.title', $title)
  ->condition('n.type', 'landbook_country')
  ->execute()
  ->fetchField();
  return $nid;
}

function load_country_description($title){
  $nid = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->condition('n.title', $title)
  ->condition('n.type', 'landbook_country')
  ->execute()
  ->fetchField();
  if(empty($nid)){
    return '';
  }
  else{
    $node = node_load($nid);
    $description=node_view($node, 'teaser'); 
    return $description ;
  }
}

/**
 * Implements hook_translated_menu_link_alter().
 */
function landbook_translated_menu_link_alter(&$item, $map) {
  global $user;
  if ($item['menu_name'] == 'user-menu' && $item['link_path'] == 'node/add') {
    if (!in_array('contributor', $user->roles) && !path_is_admin(current_path())) {
      $item['access'] = FALSE;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function landbook_views_pre_render(&$view) {
  // We target the views and probably the display we want to customize.
  if (!empty($view->name) && $view->name === 'landbook_countries_related' && $view->current_display === 'block_5') {
    // Only act on when the views is set to use "more link".
    if ($view->display_handler->use_more()) {
      $args = arg();
      // Load the term. The argument can be passed by url or panel configuration.
      if (!empty($args[2])) {
        $query = db_select('taxonomy_term_data', 't');
        $query->fields('t', array('tid'));
        $query->leftJoin('field_data_field_iso3', 'fdfi', 'fdfi.entity_id = t.tid');
        $query->condition('fdfi.field_iso3_value', $args[2]);
        $query->condition('t.vid', '3');
        $tid = $query->execute()->fetchField();

        if ($tid) {
          // Set to use 'custom_url'.
          $view->display_handler->set_option('link_display', 'custom_url');

          // Change the link url.

          $view->display_handler->set_option('link_url', 'library/search');
          $view->exposed_raw_input['f[0]'] = 'im_field_doc_country:' . $tid;
        }
      }
    }
  }
}